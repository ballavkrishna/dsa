#dp
#https://leetcode.com/problems/house-robber/
# tc- o(nm)
#sc- o(n)

class Solution:
    def rob(self, nums: List[int]) -> int:
        k=[0]*(len(nums))
        if len(nums)==0:
            return 0
        if len(nums)==1:
            return nums[0]
            
        if len(nums)==2:
            return  max(nums[0],nums[1])
        
        k[0]=nums[0]
        k[1]=max(nums[0],nums[1])
        
        for i in range(2,len(nums)) :
                # max of curr+ prev of prev , prev
                k[i]=max(k[i-2]+nums[i], k[i-1])
        return k[-1]
