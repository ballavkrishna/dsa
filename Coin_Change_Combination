
# similar to 0/1 knapsack
# time complexity o(n*m)
# dp

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        c= [1]+[0]*amount
        
        for i in coins:
            for j in range(1,amount+1):
                if j==0:
                    c[j]=1
                if j>=i:
                    c[j]+=c[j-i]
        print(c)
        return(c[-1])
        
        
 #solution 2
 #Space_Complexity=o(n*m)
 
 
 class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        c= [ [1]+[0]*amount for i in range(len(coins)) ]
        for i in range(len(coins)):
            for j in range (1,amount+1):
                if i==0 :
                    c[i][j]=1
                if j>=coins[i]:
                    c[i][j]+=(c[i-1][j]+ c[i-1][j-i])
                    
        
        
        
        print(c)
        return(c[-1][-1])
            
                
                
