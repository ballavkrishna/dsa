#https://leetcode.com/problems/longest-increasing-subsequence/submissions/
#solution -> https://www.youtube.com/watch?v=CE2b_-XfVDk&t=286s
# T.C = o(nm)


class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if len(nums)==0:
            return 0
        if len(nums)==1:
            return 1
        k=[ 1 for i in range(len(nums))]
        
        
        for i in range(1,len(nums)):
            for j in range(i):
                #if value is less than curr then dp is max of 1+dp at j or value of current dp
                if nums[j]<nums[i]:
                    k[i]=max(k[i], k[j]+1)
        return max(k)
