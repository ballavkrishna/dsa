#https://leetcode.com/problems/maximum-product-subarray/submissions/
#yt solution-> https://www.youtube.com/watch?v=86CQq3pKSUw
#kadane's algorithms
#T.C = o(n)
# memory usage less than 100% of the submissions

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
    
        final_max=nums[0]
        curr_max=nums[0]
        curr_min=nums[0]
        
        for i in range(1,len(nums)):
            t=curr_max
            #keep updating current max and curr min
            curr_max=max(nums[i]*curr_max , nums[i]*curr_min , nums[i])
            curr_min=min(nums[i]*t , nums[i]*curr_min, nums[i])
            if curr_max>final_max:
                final_max=curr_max
        return final_max
